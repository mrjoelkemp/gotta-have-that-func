describe("intersection",function(){it("returns the elements common to all passed arrays",function(){expect(func.intersection([1,2,1,3],[101,3,2,1,10],[3,2,1])).toEqual([1,2,3]);expect(func.intersection([1,2,2,2],[1,3,2,2,10],[1,2,2])).toEqual([1,2]);expect(func.intersection([],[])).toEqual([])})});describe("union",function(){it("returns the unique element aggregation of all passed arrays",function(){expect(func.union([1,2,1,3],[101,3,2,1,10],[3,2,1]).sort()).toEqual([1,2,3,10,101].sort());expect(func.union([1,2],[3,4],[4,5,6])).toEqual([1,2,3,4,5,6])})});describe("reduce",function(){it("boils down a list of values into a single value",function(){expect(func.reduce([1,2,3],function(e,t){return e+t},0)).toEqual(6)})});describe("zip",function(){it("Merges together the values of each of the arrays with the values at the corresponding position",function(){expect(func.zip(["moe","larry","curly"],[30,40,50],[!0,!1,!1])).toEqual([["moe",30,!0],["larry",40,!1],["curly",50,!1]])})});describe("find",function(){it("Looks through each value in the list, returning the first one that passes a truth test (iterator), or undefined if no value passes the test",function(){expect(func.find([1,2,3,4,5,6],function(e){return e%2===0})).toBe(2)})});describe("where",function(){var e=[{title:"Cymbeline",author:"Shakespeare",year:1611},{title:"The Tempest",author:"Shakespeare",year:1611},{title:"Balls",author:"Suckah",year:1610},{title:"FOO",author:"Shakespeare",year:1611}],t=[{a:1,b:2},{a:2,b:2},{a:1,b:3},{a:1,b:4}];it("Looks through each value in the list, returning an array of all the values that contain all of the key-value pairs listed in properties.",function(){expect(e,{author:"Shakespeare",year:1611});var n=func.where(t,{a:1});expect(n.length).toBe(3);expect(n[n.length-1].b).toBe(4);n=func.where(t,{b:2});expect(n.length).toBe(2);expect(n[0].a).toBe(1);n=func.where(t,{a:1},!1);expect(n.length).toBe(3)})});describe("every",function(){it("Returns true if all of the values in the list pass the iterator truth test. Delegates to the native method every, if present",function(){expect(func.every([!0,1,null,"yes"],function(e){return e==1})).toBeFalsy()})});describe("some",function(){it("Returns true if any of the values in the list pass the iterator truth test. Delegates to the native method every, if present",function(){expect(func.some([!0,1,null,"yes"],function(e){return e==1})).toBeTruthy()})});